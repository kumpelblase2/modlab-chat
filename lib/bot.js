// Generated by CoffeeScript 1.8.0
(function() {
  var Bot, CatchAllMessage, DEFAULT_ADAPTER, EnterMessage, EventEmitter, Fs, HttpClient, LeaveMessage, Listener, Log, Path, Response, TextListener, TopicMessage, User, _ref, _ref1,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  Fs = require('fs');

  Log = require('log');

  Path = require('path');

  HttpClient = require('scoped-http-client');

  EventEmitter = require('events').EventEmitter;

  User = require('./user');

  Response = require('./response');

  _ref = require('./listener'), Listener = _ref.Listener, TextListener = _ref.TextListener;

  _ref1 = require('./message'), EnterMessage = _ref1.EnterMessage, LeaveMessage = _ref1.LeaveMessage, TopicMessage = _ref1.TopicMessage, CatchAllMessage = _ref1.CatchAllMessage;

  DEFAULT_ADAPTER = ['twitch'];

  Bot = (function() {
    function Bot(adapterPath, adapter, name) {
      if (name == null) {
        name = 'kumpelbot';
      }
      this.name = name;
      this.events = new EventEmitter;
      this.alias = false;
      this.adapter = null;
      this.Response = Response;
      this.commands = [];
      this.listeners = [];
      this.logger = new Log(sails.config.log.level || 'info');
      this.pingIntervalId = null;
      this.parseVersion();
      this.loadAdapter(adapterPath, adapter);
      this.adapterName = adapter;
      this.errorHandlers = [];
      this.on('error', (function(_this) {
        return function(err, msg) {
          return _this.invokeErrorHandlers(err, msg);
        };
      })(this));
      process.on('uncaughtException', (function(_this) {
        return function(err) {
          return _this.emit('error', err);
        };
      })(this));
    }

    Bot.prototype.hear = function(regex, callback) {
      return this.listeners.push(new TextListener(this, regex, callback));
    };

    Bot.prototype.respond = function(regex, callback) {
      var alias, modifiers, name, newRegex, pattern, re;
      re = regex.toString().split('/');
      re.shift();
      modifiers = re.pop();
      if (re[0] && re[0][0] === '^') {
        this.logger.warning("Anchors don't work well with respond, perhaps you want to use 'hear'");
        this.logger.warning("The regex in question was " + (regex.toString()));
      }
      pattern = re.join('/');
      name = this.name.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
      if (this.alias) {
        alias = this.alias.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
        newRegex = new RegExp("^\\s*[@]?(?:" + alias + "[:,]?|" + name + "[:,]?)\\s*(?:" + pattern + ")", modifiers);
      } else {
        newRegex = new RegExp("^\\s*[@]?" + name + "[:,]?\\s*(?:" + pattern + ")", modifiers);
      }
      return this.listeners.push(new TextListener(this, newRegex, callback));
    };

    Bot.prototype.enter = function(callback) {
      return this.listeners.push(new Listener(this, (function(msg) {
        return msg instanceof EnterMessage;
      }), callback));
    };

    Bot.prototype.leave = function(callback) {
      return this.listeners.push(new Listener(this, (function(msg) {
        return msg instanceof LeaveMessage;
      }), callback));
    };

    Bot.prototype.error = function(callback) {
      return this.errorHandlers.push(callback);
    };

    Bot.prototype.invokeErrorHandlers = function(err, msg) {
      var errErr, errorHandler, _i, _len, _ref2, _results;
      this.logger.error(err.stack);
      _ref2 = this.errorHandlers;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        errorHandler = _ref2[_i];
        try {
          _results.push(errorHandler(err, msg));
        } catch (_error) {
          errErr = _error;
          _results.push(this.logger.error("while invoking error handler: " + errErr + "\n" + errErr.stack));
        }
      }
      return _results;
    };

    Bot.prototype.catchAll = function(callback) {
      return this.listeners.push(new Listener(this, (function(msg) {
        return msg instanceof CatchAllMessage;
      }), (function(msg) {
        msg.message = msg.message.message;
        return callback(msg);
      })));
    };

    Bot.prototype.receive = function(message) {
      var error, listener, results, _i, _len, _ref2;
      results = [];
      _ref2 = this.listeners;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        listener = _ref2[_i];
        try {
          results.push(listener.call(message));
          if (message.done) {
            break;
          }
        } catch (_error) {
          error = _error;
          this.emit('error', error, new this.Response(this, message, []));
          false;
        }
      }
      if (!(message instanceof CatchAllMessage) && results.indexOf(true) === -1) {
        return this.receive(new CatchAllMessage(message));
      }
    };

    Bot.prototype.loadFile = function(path, file) {
      var error, ext, full;
      ext = Path.extname(file);
      full = Path.join(path, Path.basename(file, ext));
      if (require.extensions[ext]) {
        try {
          require(full)(this);
          return this.parseHelp(Path.join(path, file));
        } catch (_error) {
          error = _error;
          this.logger.error("Unable to load " + full + ": " + error.stack);
          return process.exit(1);
        }
      }
    };

    Bot.prototype.load = function(path) {
      var file, _i, _len, _ref2, _results;
      this.logger.debug("Loading scripts from " + path);
      if (Fs.existsSync(path)) {
        _ref2 = Fs.readdirSync(path).sort();
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          file = _ref2[_i];
          _results.push(this.loadFile(path, file));
        }
        return _results;
      }
    };

    Bot.prototype.loadAdapter = function(path, adapter) {
      var err;
      this.logger.debug("Loading adapter " + adapter);
      try {
        path = __indexOf.call(DEFAULT_ADAPTER, adapter) >= 0 ? "" + path + "/" + adapter : "hubot-" + adapter;
        return this.adapter = require(path).use(this);
      } catch (_error) {
        err = _error;
        this.logger.error("Cannot load adapter " + adapter + " - " + err);
        return process.exit(1);
      }
    };

    Bot.prototype.helpCommands = function() {
      return this.commands.sort();
    };

    Bot.prototype.parseHelp = function(path) {
      var body, cleanedLine, currentSection, line, nextSection, scriptDocumentation, scriptName, _i, _j, _len, _len1, _ref2, _ref3, _results;
      this.logger.debug("Parsing help for " + path);
      scriptName = Path.basename(path).replace(/\.(coffee|js)$/, '');
      scriptDocumentation = {};
      body = Fs.readFileSync(path, 'utf-8');
      currentSection = null;
      _ref2 = body.split("\n");
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        line = _ref2[_i];
        if (!(line[0] === '#' || line.substr(0, 2) === '//')) {
          break;
        }
        cleanedLine = line.replace(/^(#|\/\/)\s?/, "").trim();
        if (cleanedLine.length === 0) {
          continue;
        }
        if (cleanedLine.toLowerCase() === 'none') {
          continue;
        }
        nextSection = cleanedLine.toLowerCase().replace(':', '');
        if (__indexOf.call(HUBOT_DOCUMENTATION_SECTIONS, nextSection) >= 0) {
          currentSection = nextSection;
          scriptDocumentation[currentSection] = [];
        } else {
          if (currentSection) {
            scriptDocumentation[currentSection].push(cleanedLine.trim());
            if (currentSection === 'commands') {
              this.commands.push(cleanedLine.trim());
            }
          }
        }
      }
      if (currentSection === null) {
        this.logger.info("" + path + " is using deprecated documentation syntax");
        scriptDocumentation.commands = [];
        _ref3 = body.split("\n");
        _results = [];
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          line = _ref3[_j];
          if (!(line[0] === '#' || line.substr(0, 2) === '//')) {
            break;
          }
          if (!line.match('-')) {
            continue;
          }
          cleanedLine = line.slice(2, +line.length + 1 || 9e9).replace(/^hubot/i, this.name).trim();
          scriptDocumentation.commands.push(cleanedLine);
          _results.push(this.commands.push(cleanedLine));
        }
        return _results;
      }
    };

    Bot.prototype.send = function() {
      var strings, user, _ref2;
      user = arguments[0], strings = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref2 = this.adapter).send.apply(_ref2, [user].concat(__slice.call(strings)));
    };

    Bot.prototype.reply = function() {
      var strings, user, _ref2;
      user = arguments[0], strings = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref2 = this.adapter).reply.apply(_ref2, [user].concat(__slice.call(strings)));
    };

    Bot.prototype.messageRoom = function() {
      var room, strings, user, _ref2;
      room = arguments[0], strings = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      user = {
        room: room
      };
      return (_ref2 = this.adapter).send.apply(_ref2, [user].concat(__slice.call(strings)));
    };

    Bot.prototype.on = function() {
      var args, event, _ref2;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref2 = this.events).on.apply(_ref2, [event].concat(__slice.call(args)));
    };

    Bot.prototype.emit = function() {
      var args, event, _ref2;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref2 = this.events).emit.apply(_ref2, [event].concat(__slice.call(args)));
    };

    Bot.prototype.run = function() {
      this.emit("running");
      return this.adapter.run();
    };

    Bot.prototype.shutdown = function() {
      if (this.pingIntervalId != null) {
        clearInterval(this.pingIntervalId);
      }
      return this.adapter.close();
    };

    Bot.prototype.parseVersion = function() {
      var pkg;
      pkg = require(Path.join(__dirname, '..', 'package.json'));
      return this.version = pkg.version;
    };

    Bot.prototype.http = function(url) {
      return HttpClient.create(url).header('User-Agent', "" + this.name + "/" + this.version);
    };

    return Bot;

  })();

  module.exports = Bot;

}).call(this);
